/// This zksnark is to be used to verify that an operator has choosen 
/// the lowest bid that was actually submitted by an approved supplier was choosen 
/// by the operator for the work. For this proof of concept, we will structure the 
/// proof to use 3 suppliers. 

///    Inputs for the SNARK

///    PUBLIC FIELDS
///    input: field[3] public keys for each supplier - should be EDDSA public keys
///    *  A: Curve point. Public part of the key used to create S.
///    *  context: Curve parameters used to create S. Tells you which curve was used.

///    PRIVATE FIELDS 
///    input: field[3] actual bid from each supplier
///    input: Requires per each EDDSA signatures per supplier     
///    *  R: Curve point. Hidden version of the per-message nonce.
///    *  S: Field element. Signature to be verified.
///    input: a secret to aide in building out the merkel tree of the results

///    Returns for the SNARK
///    return: a merkel tree including...
///    1. private key of choosen supplier
///    2. choosen bid
///    3. secret
///    4. zero (placeholder)

// In the vectors, the supplier order should be kept the same to compare/access (i.e. supplier one has first bid, supplier two second bid, etc.)

//For signatures
import "ecc/babyjubjubParams.code" as context
import "signatures/verifyEddsa.code" as verifyEddsa
//For unpacking bids correctly
import "utils/pack/unpack128.code" as unpack128
import "utils/pack/pack128.code" as pack128
import "utils/pack/unpack256.code" as unpack256
//For unpacking signatures correctly
import "utils/pack/pack128.code" as pack128
//For merkle tree - changed to padded
import "hashes/sha256/512bitPadded.code" as sha256

def main(private field[6] R, \
 field[6] A, \
 field[3] S, \
 private field secret, \
 private field bidone, \
 private field bidtwo, \
 private field bidthree) -> (field[2]):
 
//Since each message is constructed from the bids, no way to input a faulty bid

//Reconstruct messages:
//Note: Field element can be a value between 0 and p (p upper limit: 2^254)
//Makes an assumption that every bid will be 64 bit number
//Message in the signature should be 512 bits

 field[128] bidoneunpacked = unpack128(bidone)
 field[512] bidonemessage = [...[0; 384], ...bidoneunpacked]
 field[128] bidtwounpacked = unpack128(bidtwo)
 field[512] bidtwomessage = [...[0; 384], ...bidtwounpacked]
 field[128] bidthreeunpacked = unpack128(bidthree)
 field[512] bidthreemessage = [...[0; 384], ...bidthreeunpacked]

 context = context()

 // Supplier 1
 1 == verifyEddsa(R[0..2], S[0], A[0..2], bidonemessage[0..256], bidonemessage[256..512], context)
 // Supplier 2
 1 == verifyEddsa(R[2..4], S[1], A[2..4], bidtwomessage[0..256], bidtwomessage[256..512], context)
 // Supplier 3
 1 == verifyEddsa(R[4..6], S[2], A[4..6], bidthreemessage[0..256], bidthreemessage[256..512], context)

//Lowest bid should correllate with supplier
//To Do: write the simplest implementation to simplify, each of the below would be a range proof
field[3] lowestbidder = [...[0; 3]] //Save supplier and the lowest bid
lowestbidder = if bidone < bidtwo && bidtwo < bidthree then [A[0], A[1], bidone] else [...[0; 3]] fi 
lowestbidder = if bidtwo < bidone && bidtwo < bidthree then [A[2], A[3], bidtwo] else [...[0; 3]] fi
lowestbidder = if bidthree < bidone && bidthree < bidtwo then [A[4], A[5], bidthree] else [...[0; 3]] fi


//Now we have the lowest bid, supplier sig verified, and secret --> ready for the merkle tree
//512bitpadded - same merkle tree as ethereum 
//Leaf One: lowest bid + secret
//Makes an assumption that every secret will be 64 bit number
field lowest = lowestbidder[2]
field[256] lowestbidunpacked = unpack256(lowest)
field[256] secretunpacked = unpack256(secret)
field[256] leafone = sha256(lowestbidunpacked, secretunpacked)
//Leaf Two: supplier of lowest bid A[0] + A[1]
//We know that A[0] and A[1] will be 64 bit numbers, need to unpack to 256
field[256] a0unpacked = unpack256(A[0])
field[256] a1unpacked = unpack256(A[1])
field[256] leaftwo = sha256(a0unpacked, a1unpacked)
//Build the root of leaf one + leaf two
field[256] root = sha256(leafone, leaftwo)

//Before returning, compress back to field element root - split off 128 bits 
res0 = pack128(root[..128])
res1 = pack128(root[128..])

return [res0, res1]

